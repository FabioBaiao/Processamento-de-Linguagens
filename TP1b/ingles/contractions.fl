%option noyywrap
%{
	#include <glib.h>
	#include <string.h>

	void htmlBegin(FILE* f, char* title);
	void htmlEnd(FILE* f);
	void insert(GTree *, char *);
	gboolean printVerb(gpointer key, gpointer value, gpointer data);

	GTree *verbs;
	int n = 0;
	FILE *fp, *f;
%}
MODAL		[Ss]hall|[Ss]hould|[Mm]ay|[Mm]ight|[Cc]an|[Cc]ould|[Ww]ill|[Ww]ould|[Oo]ught|[Mm]ust
QUESTIONS	[Dd]o|[Dd]oes|[Dd]id|{MODAL}
NEGATIVE	[Dd]on't|[Dd]oesn't|[Dd]idn't|[Ss]houldn't|[Mm]ightn't|[Cc]ouldn't|[Mm]ustn't|[Ww]ouldn't
SUBJECT		[Ii]|[Yy]ou|[Hh]e|[Ss]he|[Ww]e|[Tt]hey|[A-Z]{1}[a-z]+
ALPHA		[a-z]+
SIGNAL		[,;:.-?!\n\t]
EXCEPTIONS 	me|you|him|it|us|them|my|your|his|her|its|our|their|mine|yours|hers|ours|theirs|the|a|an|all|many|this|that|by|also|other|another|always|never|each|still|then
NUMBERS 	zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety	
VERBS 		[Cc]onvert(ed)?|[Ll]e(a)?d|[Pp]oint(ed)?|[Rr]efer(ed)?|[Aa]ssign(ed)?

%%

ain't 									{ fprintf(f, " _am/is/are/has/have not_"); }
Ain't 									{ fprintf(f, " _Am/Is/Are/Has/Have not_"); }
[Ss]han't 								{ fprintf(f, " _%chall not_", yytext[0]); }
[Ww]on't 								{ fprintf(f, " _%cill not_", yytext[0]); }
[Cc]an't								{ fprintf(f, "_%cannot_", yytext[0]); }
n't 									{ fprintf(f, " _not_"); }
'm										{ fprintf(f, " _am_"); }
'll										{ fprintf(f, " _will/shall_"); }
're										{ fprintf(f, " _are_"); }
's										{ fprintf(f, " _is_"); }
[Cc]'mon								{ fprintf(f, "_%come on_", yytext[0]); }
've										{ fprintf(f, " _have_"); }
'd										{ fprintf(f, " _had/would_"); }
[Hh]ow'll								{ fprintf(f, "_%cow will_", yytext[0]); }
[Hh]ow's 								{ fprintf(f, "_%cow has/is_", yytext[0]); }
[Oo]'clock								{ fprintf(f, "_%cf the clock_", yytext[0]); }
[Oo]l'									{ fprintf(f, "_%cld_", yytext[0]); }
[Gg]onna\ {ALPHA}						{ fprintf(f, "_%coing to %s_", yytext[0], yytext+6);
								  		  char *v = strdup(yytext+6);
								    	  insert(verbs, v);
								  		  n++; }
[Ww]anna\ {ALPHA}						{ fprintf(f, "_%cant to %s_", yytext[0], yytext+6);
								  		  char *v = strdup(yytext+6);
								    	  insert(verbs, v);
								  		  n++; }
[Gg]otta\ {ALPHA}						{ fprintf(f, "_%cot to %s_", yytext[0], yytext+6);
										  char *v = strdup(yytext+6);
										  insert(verbs, v);
										  n++; }
.|\n									{ fprintf(f, "%s", yytext); }
<*><<EOF>>								{ fprintf(f, "\t\t</textarea>\n\t"); 
								  		  return 0;}

[Tt]o\ {EXCEPTIONS}						{ fprintf(f, "%s", yytext); }
[Tt]o\ [A-Z]                    		{ fprintf(f, "%s", yytext); }
[Tt]o\ [0-9]+                   		{ fprintf(f, "%s", yytext); }
[Tt]o\ {NUMBERS}						{ fprintf(f, "%s", yytext); }
[Tt]o\ {SIGNAL}							{ fprintf(f, "%s", yytext); }
[Tt]o\ {ALPHA} 							{ fprintf(f, "%s", yytext);
								  	      char *v = strdup(yytext+3);
								  		  insert(verbs, v);
								  		  n++; }	
{VERBS}\ to\ {ALPHA}					{ fprintf(f, "%s", yytext); }										  						  	  
[\n ][Bb][Tt][Ww]                    	{ fprintf(f, "_%cy %che %cay_", yytext[0], yytext[1], yytext[2]); }
[\n ][Bb][Ff][Ff]                    	{ fprintf(f, "_%cest %criend %corever_", yytext[0], yytext[1], yytext[2]); }
[\n ][Ii][Ll][Yy]                    	{ fprintf(f, " _%c %cove %cou_", yytext[0], yytext[1], yytext[2]); }
[\n ][Ii][Dd][Gg][Aa][Ff]            	{ fprintf(f, "_%c %con't %cive %c %cuck_", yytext[0], yytext[1], yytext[2], yytext[3], yytext[4]); }
[\n ][Jj][Kk]                        	{ fprintf(f, "_%cust %cidding_", yytext[0], yytext[1]); }
[\n ][Ll][Mm][Aa][Oo]                	{ fprintf(f, "_%caughing %cy %css %cff_", yytext[0], yytext[1], yytext[2], yytext[3]); } 
[\n ][Ll][Oo][Ll]                    	{ fprintf(f, "_%caughing %cut %coud_", yytext[0], yytext[1], yytext[2]); }
[\n ][Nn][Pp]                        	{ fprintf(f, "_%co %croblem_", yytext[0], yytext[1]); }
[\n ][Oo][Mm][Gg]                    	{ fprintf(f, "_%ch %cy %cod_", yytext[0], yytext[1], yytext[2]); }
[\n ][Ww][Tt][Ff]                    	{ fprintf(f, "_%chat %che %cuck_", yytext[0], yytext[1], yytext[2]); }

{MODAL}\ {EXCEPTIONS}					{ fprintf(f, "%s", yytext); }
{MODAL}\ {ALPHA}						{ fprintf(f, "%s", yytext);
										  strtok(yytext, " ");
										  char* v = strdup(strtok(NULL, " "));
										  insert(verbs, v);
										  n++; }	
{QUESTIONS}\ {SUBJECT}\ {ALPHA} 		{ fprintf(f, "%s", yytext);
										  strtok(yytext, " ");
										  strtok(NULL, " ");
									  	  char* v = strdup(strtok(NULL," ")); 
									  	  insert(verbs, v);
									  	  n++; }
[Cc]an't\ {SUBJECT}\ {ALPHA}			{ strtok(yytext, " ");
										  char* subject = strtok(NULL, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%cannot %s %s", yytext[0], subject, v);
										  insert(verbs, v);
										  n++;  }								  		  
[Ww]on't\ {SUBJECT}\ {ALPHA}			{ strtok(yytext, " ");
										  char* subject = strtok(NULL, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%cill not %s %s", yytext[0], subject, v);
										  insert(verbs, v);
										  n++;  }
[Cc]an't\ {ALPHA}						{ strtok(yytext, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%cannot %s", yytext[0], v);
										  insert(verbs, v);
										  n++;  }								  		  
[Ww]on't\ {ALPHA}						{ strtok(yytext, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%cill not %s", yytext[0], v);
										  insert(verbs, v);
										  n++;  }										 
{NEGATIVE}\ {SUBJECT}\ {ALPHA}			{ char* rep = strdup(yytext);
										  char* neg = strtok(yytext, "n't");
										  strtok(rep, " ");
										  char* subject = strtok(NULL, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%s not %s %s", neg, subject, v);
										  insert(verbs, v);
										  n++;
									  	  free(rep); }
{NEGATIVE}\ {ALPHA}						{ char* rep = strdup(yytext);
										  char* neg = strtok(yytext, "n't");
										  strtok(rep, " ");
										  char* v = strdup(strtok(NULL, " "));
										  fprintf(f, "%s not %s", neg, v);
										  insert(verbs, v);
										  n++;
									  	  free(rep); }

%%

int main(){
	f = fopen("layout/output.html", "w");
	fp = fopen("layout/verbs.html", "w");
	htmlBegin(f, "Output text");
	htmlBegin(fp, "Verbs used in the infinitive form");
	fprintf(f, "\t\t<textarea class='output_box'>\n");
	fprintf(fp, "\t\t<ul class='verbs_list'>\n");
	system("mv ~/Downloads/input.txt .");
	yyin = fopen("input.txt", "r");
	verbs = g_tree_new((GCompareFunc)strcmp);
	yylex();
	g_tree_foreach(verbs, (GTraverseFunc)printVerb, NULL);
	fprintf(fp, "\t\t</ul>\n\t");
	fprintf(fp, "<p></p><p>Repetições de verbos: %d</p>", (n-g_tree_nnodes(verbs)));
	htmlEnd(f);
	htmlEnd(fp);
	g_tree_destroy(verbs);
	fclose(yyin);
	fclose(f);
	fclose(fp);
	return 0;
}

void htmlBegin(FILE *f, char* title){
	fprintf(f, "<html>\n\t");
	fprintf(f, "<head>\n\t\t");
	fprintf(f, "<meta charset='UTF-8'/>\n\t\t");
	fprintf(f, "<link rel='stylesheet' ");
	fprintf(f, "type='text/css' href='styles.css'>\n\t");
	fprintf(f, "</head>\n\t");
	fprintf(f, "<body>\n\t\t");
	fprintf(f, "<h2 class='specialFont'>%s</h2>\n", title);
}

void htmlEnd(FILE* f){
	fprintf(f, "</body>\n");
	fprintf(f, "</html>");
}

gboolean printVerb(gpointer key, gpointer value, gpointer data) {
	fprintf(fp, "\t\t\t<li>%s ...... x%d</li>\n", (char *) key, *((int *) value));	
	return FALSE;
}

void insert(GTree *tree, char *key){
	int *value = g_tree_lookup(tree, key);
	if (value != NULL){
		(*value)++;
	}
	else{
		value = malloc(sizeof(int));
		*value = 1;
	}
	g_tree_insert(tree, key, value);
}